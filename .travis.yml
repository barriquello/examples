notifications:
  email: false
language: c #NOTE: this will set CC=gcc which might cause trouble

before_script:
  - WGET="travis_retry wget --continue --tries=20 --waitretry=10 --retry-connrefused --no-dns-cache --timeout 300"
  - sudo apt-get -qq update

  ## Install doxygen
  - if [ ${BUILD_CATEGORY:-0} = doxygen ] ; then
      sudo add-apt-repository ppa:libreoffice/libreoffice-4-4 -y && sudo apt-get -qq update &&
      sudo apt-get --no-install-suggests --no-install-recommends -qq install doxygen  &&
      doxygen --version ;
    fi	

  ## Install avr toolchain
  - sudo apt-get -qq install gcc-avr avr-libc

  ## Install 32-bit compatibility libraries
  - sudo apt-get -qq install libc6:i386 libgcc1:i386 gcc-4.6-base:i386
      libstdc++5:i386 libstdc++6:i386	  

  ## Install CFV1 GCC toolchain
  - sudo apt-get -qq install gcc g++ build-essential automake autoconf gdb bzip2 texinfo patch flex bison subversion
  
  ##CFLAGS="-Wno-error" ../configure --target=m68k-elf --prefix=${INSTPREFIX} --enable-languages="c" --with-newlib --without-headers --disable-shared &&
  - if [ ${BUILD_ARCH:-0} = cfv1 ] ; then	     
      sudo mkdir -p /usr/local/coldfire/bin &&
      sudo mkdir -p /usr/local/coldfire/lib  &&
      sudo mkdir -p /usr/local/coldfire/share &&
      export INSTPREFIX=/usr/local/coldfire  &&
      export PATH=${INSTPREFIX}/bin:${PATH} &&
      echo "export PATH=/usr/local/coldfire/bin:${PATH}" >> ~/.bashrc &&
      echo "setenv PATH /usr/local/coldfire/bin:${PATH}" >> ~/.cshrc &&
      mkdir -p ~/build_env &&
      cd ~/build_env &&
      $WGET http://ftp.gnu.org/gnu/binutils/binutils-2.22.tar.bz2 &&
      tar xvjf binutils-2.22.tar.bz2 &&
      cd binutils-2.22/ &&
      CFLAGS="-Wno-error" ./configure  --target=m68k-elf --prefix=${INSTPREFIX} &&
      CFLAGS="-Wno-error" make &&
      sudo make install &&
      cd .. &&
      $WGET http://ftp.sunet.se/pub/gnu/gmp/gmp-5.1.3.tar.gz &&
      tar -xvf gmp-5.1.3.tar.gz &&
      cd gmp-5.1.3 &&
      ./configure &&
      make -j 6 &&
      sudo make install &&
      cd .. &&
      $WGET http://www.mpfr.org/mpfr-current/mpfr-3.1.3.tar.bz2 &&
      bzcat mpfr-3.1.3.tar.bz2 | tar -xf - &&
      cd mpfr-3.1.3 &&
      ./configure &&
      make -j 6 &&
      sudo make install &&
      cd .. &&
      $WGET ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz &&
      tar -xvf mpc-1.0.3.tar.gz &&
      cd mpc-1.0.3 &&
      ./configure &&
      make -j 6 &&
      sudo make install &&
      cd .. &&	  
      sudo ldconfig &&
      sudo depmod -a &&
      $WGET http://ftp.gnu.org/gnu/gcc/gcc-4.6.4/gcc-core-4.6.4.tar.bz2 &&
      tar xvjf gcc-core-4.6.4.tar.bz2 &&
      cd gcc-4.6.4 &&
      mkdir build &&
      cd build &&      
      CFLAGS="-Wno-error" ../configure --target=m68k-elf --prefix=${INSTPREFIX} --enable-languages=c --with-newlib --disable-libmudflap --disable-libssp --disable-libgomp --disable-libstdcxx-pch --disable-threads --with-gnu-as --with-gnu-ld --disable-nls --with-headers=yes --disable-checking --without-headers &&
      CFLAGS="-Wno-error" make &&
      sudo PATH=${PATH}:${INSTPREFIX} make install &&
      cd .. &&
      cd .. &&
      $WGET ftp://sources.redhat.com/pub/newlib/newlib-1.20.0.tar.gz &&
      tar -xvf newlib-1.20.0.tar.gz &&
      cd newlib-1.20.0 &&
      mkdir m68k-obj &&
      cd m68k-obj &&
      ../configure --target=m68k-elf --prefix=${INSTPREFIX} --enable-newlib-reent-small --disable-malloc-debugging --enable-newlib-multithread --disable-newlib-io-float --disable-newlib-supplied-syscalls --disable-newlib-io-c99-formats --disable-newlib-mb --disable-newlib-atexit-alloc --enable-target-optspace --disable-shared --enable-static --enable-fast-install &&
      make -j 6 &&
      sudo PATH=${PATH}:${INSTPREFIX} make install &&
      m68k-elf-gcc -v ;	  
    fi


script:
  ## regression-tests/Makefile handles most of generic logic
  - "make -C tests/??-$BUILD_TYPE RUNALL=true summary"

after_script:
  ## Print a basic summary
  - "echo 'Summary:'; cat tests/??-$BUILD_TYPE/summary"
  - "FAILS=`grep -c  ' FAIL ' tests/??-$BUILD_TYPE/summary`"
  ## This will detect whether the build should pass or fail
  - "test $FAILS -eq 0; exit $?"

env:
  ## This magically kick-off parallel jobs for each of the for the sets
  ## of environment variable defined below
  ## - BUILD_TYPE='doxygen'  BUILD_CATEGORY='doxygen'
  - BUILD_TYPE='compile-cfv1-port' BUILD_CATEGORY='compile' BUILD_ARCH='cfv1'
